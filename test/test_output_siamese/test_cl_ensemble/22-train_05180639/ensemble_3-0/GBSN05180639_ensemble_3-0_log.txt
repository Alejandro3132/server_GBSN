ds_op:  {'exp_label': 'ensemble', 'data_type_list': ['short', 'short', 'med', 'text_features']}
experiment repetition:  0  of  1
data_type_list:  ['short', 'short', 'med', 'text_features']

Sparse mode: False
device cuda:0
tensor type torch.FloatTensor
Epochs: 2
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': ['../test/test_output_siamese/test_command_line/22-train_05100212/short_0-0/best_model_.pth', '../test/test_output_siamese/test_command_line/22-train_05100222/short_0-0/best_model_.pth', '../test/test_output_siamese/test_command_line/22-train_05101612/med_0-0/best_model_.pth', {'class': <class 'siamese_graph.TextFeatures'>, 'args': {'num_text_features': 191, 'text_feat_layers_num': 0, 'h_ch': 64, 'out_ch': 64}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7fcddf9e24c0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7fcddf9e2550>)
('bound_f1_loss', <function bound_f1_loss at 0x7fcddf9e2670>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): TAGConv(38, 64, K=3)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (1): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (2): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (3): TextFeatures(
      (feat_layer): Identity()
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=383, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 0.03
Seconds: 1.80

 ===== Test last_model. Execute time was:
Minutes: 0.00
Seconds: 0.18

 ===== Test best_model. Execute time was:
Minutes: 0.00
Seconds: 0.17

 ===== Test best_model_sa. Execute time was:
Minutes: 0.00
Seconds: 0.17

Saving raw metrics in: ../test/test_output_siamese/test_cl_ensemble/22-train_05180639/ensemble_3-0/GBSN05180639_ensemble_3-0_metrics

 ===== best_model:
Epoch: 1
                          val      test
-------------------  --------  --------
main loss            0.453545  0.481609
average              0.938382  0.854943
roc_auc              0.947368  0.631579
f1_score             0.974359  0.947368
c_at_1               0.95      0.9
f_05                 0.959596  0.947368
brier                0.860589  0.848401
soft_f1_loss         0.221622  0.234916
double_soft_f1_loss  0.553858  0.565931
bound_f1_loss        0.245211  0.258314

 ===== best_model_sa:
Epoch: 1
                          val      test
-------------------  --------  --------
main loss            0.453545  0.481611
average              0.938382  0.854943
roc_auc              0.947368  0.631579
f1_score             0.974359  0.947368
c_at_1               0.95      0.9
f_05                 0.959596  0.947368
brier                0.860589  0.8484
soft_f1_loss         0.221622  0.234917
double_soft_f1_loss  0.553858  0.565931
bound_f1_loss        0.245211  0.258315

 ===== last_model:
Epoch: 1
                          val      test
-------------------  --------  --------
main loss            0.453545  0.48161
average              0.938382  0.854943
roc_auc              0.947368  0.631579
f1_score             0.974359  0.947368
c_at_1               0.95      0.9
f_05                 0.959596  0.947368
brier                0.860589  0.8484
soft_f1_loss         0.221622  0.234916
double_soft_f1_loss  0.553858  0.565931
bound_f1_loss        0.245211  0.258315

===== Early stop model:
Epoch: NA

===== Max average in val: 0.938382 epoch 1

===== Optimize threshold for best_model:
Test: Original
0.8549432977875686
Val: Best th posible
('0.05', '0.00')
0.9535837241204573
Test: Optimized
0.8896109534448968
Test: Best th posible
('0.05', '0.00')
0.8896109534448968

===== Optimize threshold for best_model_sa:
Test: Original
0.8549431529889059
Val: Best th posible
('0.05', '0.00')
0.9535837366753246
Test: Optimized
0.889610913334464
Test: Best th posible
('0.05', '0.00')
0.889610913334464

==========
Max gpu_usage: 1228

 ===== Total time for GBSN05180639_ensemble_3-0. Execute time was:
Minutes: 0.17
Seconds: 10.10
