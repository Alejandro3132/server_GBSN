ds_op:  {'exp_label': 'ensemble', 'data_type_list': ['short', 'short', 'med', 'text_features']}
experiment repetition:  0  of  1
data_type_list:  ['short', 'short', 'med', 'text_features']

Sparse mode: False
device cuda:0
tensor type torch.FloatTensor
Epochs: 2
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': ['../test/test_output_siamese/test_command_line/22-train_05100212/short_0-0/best_model_.pth', '../test/test_output_siamese/test_command_line/22-train_05100222/short_0-0/best_model_.pth', '../test/test_output_siamese/test_command_line/22-train_05101612/med_0-0/best_model_.pth', {'class': <class 'siamese_graph.TextFeatures'>, 'args': {'num_text_features': 191, 'text_feat_layers_num': 0, 'h_ch': 64, 'out_ch': 64}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7fac932b9670>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7fac932b9700>)
('bound_f1_loss', <function bound_f1_loss at 0x7fac932b9820>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): TAGConv(38, 64, K=3)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (1): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (2): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
    (3): TextFeatures(
      (feat_layer): Identity()
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=383, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 0.52
Seconds: 30.96

 ===== Test last_model. Execute time was:
Minutes: 0.01
Seconds: 0.57

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.57

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.56

Saving raw metrics in: ../test/test_output_siamese/test_cl_ensemble/22-train_05190139/ensemble_3-0/GBSN05190139_ensemble_3-0_metrics

 ===== best_model:
Epoch: 1
                          val      test
-------------------  --------  --------
main loss            1.50196   1.77184
average              0.575675  0.567612
roc_auc              0.567717  0.534125
f1_score             0.66242   0.670455
c_at_1               0.507958  0.51215
f_05                 0.557427  0.561192
brier                0.582851  0.560138
soft_f1_loss         0.459943  0.479548
double_soft_f1_loss  0.656849  0.692302
bound_f1_loss        0.524836  0.518174

 ===== best_model_sa:
Epoch: 0
                          val      test
-------------------  --------  --------
main loss            0.905339  0.960252
average              0.616856  0.555642
roc_auc              0.58969   0.507335
f1_score             0.62837   0.566749
c_at_1               0.579576  0.505607
f_05                 0.587462  0.5276
brier                0.699185  0.670921
soft_f1_loss         0.541691  0.576971
double_soft_f1_loss  0.577875  0.627818
bound_f1_loss        0.607192  0.619286

 ===== last_model:
Epoch: 1
                          val      test
-------------------  --------  --------
main loss            1.50196   1.77184
average              0.575675  0.567612
roc_auc              0.567717  0.534125
f1_score             0.66242   0.670455
c_at_1               0.507958  0.51215
f_05                 0.557427  0.561192
brier                0.582851  0.560139
soft_f1_loss         0.459943  0.479548
double_soft_f1_loss  0.656849  0.692301
bound_f1_loss        0.524836  0.518174

===== Early stop model:
Epoch: NA

===== Max average in val: 0.616856 epoch 0

===== Optimize threshold for best_model:
Test: Original
0.5676119548173284
Val: Best th posible
('0.70', '0.05')
0.5876482299384721
Test: Optimized
0.5728848096262287
Test: Best th posible
('0.75', '0.20')
0.5775617654215218

===== Optimize threshold for best_model_sa:
Test: Original
0.5556423303148831
Val: Best th posible
('0.35', '0.05')
0.6222671901847696
Test: Optimized
0.5746121230893151
Test: Best th posible
('0.20', '0.00')
0.5870389904026505

==========
Max gpu_usage: 6520

 ===== Total time for GBSN05190139_ensemble_3-0. Execute time was:
Minutes: 0.73
Seconds: 43.77
