ds_op:  {'exp_label': 'short'}
experiment repetition:  0  of  1
data_type_list:  ['short']

Sparse mode: False
device cuda:7
tensor type torch.FloatTensor
Epochs: 150
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': [{'class': <class 'siamese_graph.GBFeatures'>, 'args': {'conv_layers_num': 12, 'conv_type': <class 'torch_geometric.nn.conv.tag_conv.TAGConv'>, 'h_ch': 64, 'out_ch': 64, 'pool_type': <class 'siamese_graph.GlobalAttentionSelect'>, 'pool_att_ch': 32, 'pool_att_layers': 4, 'pool_ref': 'last'}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7ff088f4fca0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7ff088f4fd30>)
('bound_f1_loss', <function bound_f1_loss at 0x7ff088f4fe50>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): TAGConv(38, 64, K=3)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (9): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (10): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (11): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 2.98
Seconds: 178.82

 ===== Test last_model. Execute time was:
Minutes: 0.01
Seconds: 0.34

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.35

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.35

Saving raw metrics in: ../test/test_output_siamese/test_command_line/22-train_05101017/short_0-0/GBSN05101017_short_0-0_metrics

 ===== best_model:
Epoch: 19
                           val      test
-------------------  ---------  --------
main loss            0.431291   0.364359
average              0.764324   0.956859
roc_auc              0.0526316  1
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.885031   0.900342
soft_f1_loss         0.159116   0.17816
double_soft_f1_loss  0.572116   0.525688
bound_f1_loss        0.182844   0.202175

 ===== best_model_sa:
Epoch: 10
                          val      test
-------------------  --------  --------
main loss            0.677855  0.677414
average              0.886215  0.907312
roc_auc              0.789474  0.894737
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.757645  0.757866
soft_f1_loss         0.337522  0.33732
double_soft_f1_loss  0.62333   0.623195
bound_f1_loss        0.35948   0.359282

 ===== last_model:
Epoch: 149
                           val      test
-------------------  ---------  --------
main loss            4.46362    0.988567
average              0.620023   0.701512
roc_auc              0.0789474  0.736842
f1_score             0.787879   0.689655
c_at_1               0.65       0.55
f_05                 0.866667   0.847458
brier                0.716621   0.683604
soft_f1_loss         0.193989   0.259925
double_soft_f1_loss  0.596994   0.542917
bound_f1_loss        0.21735    0.283476

 ===== Early stop model:
Epoch: 19
Early stop model deactivated

===== Max average in val: 0.886215 epoch 10

===== Optimize threshold for best_model:
Test: Original
0.9568593799068348
Val: Best th posible
('0.05', '0.00')
0.7739243286476528
Test: Optimized
0.9661823284639854
Test: Best th posible
('0.05', '0.00')
0.9661823284639854

===== Optimize threshold for best_model_sa:
Test: Original
0.9073115141798519
Val: Best th posible
('0.05', '0.00')
0.9164821609354608
Test: Optimized
0.9375478931743302
Test: Best th posible
('0.05', '0.00')
0.9375478931743302

==========
Max gpu_usage: 31830

 ===== Total time for GBSN05101017_short_0-0. Execute time was:
Minutes: 3.27
Seconds: 196.43
