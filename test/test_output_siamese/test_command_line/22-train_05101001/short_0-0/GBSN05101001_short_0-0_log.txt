ds_op:  {'exp_label': 'short'}
experiment repetition:  0  of  1
data_type_list:  ['short']

Sparse mode: False
device cuda:7
tensor type torch.FloatTensor
Epochs: 130
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': [{'class': <class 'siamese_graph.GBFeatures'>, 'args': {'conv_layers_num': 12, 'conv_type': <class 'torch_geometric.nn.conv.graph_conv.GraphConv'>, 'h_ch': 64, 'out_ch': 64, 'pool_type': <class 'siamese_graph.GlobalAttentionSelect'>, 'pool_att_ch': 32, 'pool_att_layers': 4, 'pool_ref': 'last'}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7fa225e03ca0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7fa225e03d30>)
('bound_f1_loss', <function bound_f1_loss at 0x7fa225e03e50>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (9): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (10): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (11): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 2.48
Seconds: 148.99

 ===== Test last_model. Execute time was:
Minutes: 0.01
Seconds: 0.36

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.36

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.36

Saving raw metrics in: ../test/test_output_siamese/test_command_line/22-train_05101001/short_0-0/GBSN05101001_short_0-0_metrics

 ===== best_model:
Epoch: 25
                          val      test
-------------------  --------  --------
main loss            0.277398  0.322064
average              0.865386  0.822133
roc_auc              0.526316  0.315789
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.91666   0.910918
soft_f1_loss         0.107176  0.137068
double_soft_f1_loss  0.519539  0.536627
bound_f1_loss        0.131389  0.161111

 ===== best_model_sa:
Epoch: 36
                           val       test
-------------------  ---------  ---------
main loss            0.647748   1.48633
average              0.935003   0.829922
roc_auc              0.842105   0.315789
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.948952   0.949867
soft_f1_loss         0.0295228  0.0273899
double_soft_f1_loss  0.514759   0.513695
bound_f1_loss        0.0538743  0.0517455

 ===== last_model:
Epoch: 129
                           val       test
-------------------  ---------  ---------
main loss            0.728726   1.06715
average              0.880126   0.792607
roc_auc              0.578947   0.157895
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.937726   0.921184
soft_f1_loss         0.0490675  0.0781499
double_soft_f1_loss  0.524533   0.539075
bound_f1_loss        0.0733699  0.102345

 ===== Early stop model:
Epoch: 25
Early stop model deactivated

===== Max average in val: 0.935003 epoch 36

===== Optimize threshold for best_model:
Test: Original
0.8221325259176059
Val: Best th posible
('0.05', '0.00')
0.8709075145692037
Test: Optimized
0.8285964138257016
Test: Best th posible
('0.05', '0.00')
0.8285964138257016

===== Optimize threshold for best_model_sa:
Test: Original
0.8299222283094885
Val: Best th posible
('0.05', '0.00')
0.935154018926205
Test: Optimized
0.8299414983648538
Test: Best th posible
('0.05', '0.00')
0.8299414983648538

==========
Max gpu_usage: 31820

 ===== Total time for GBSN05101001_short_0-0. Execute time was:
Minutes: 2.79
Seconds: 167.48
