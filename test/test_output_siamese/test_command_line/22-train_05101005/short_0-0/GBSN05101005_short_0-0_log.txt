ds_op:  {'exp_label': 'short'}
experiment repetition:  0  of  1
data_type_list:  ['short']

Sparse mode: False
device cuda:7
tensor type torch.FloatTensor
Epochs: 130
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': [{'class': <class 'siamese_graph.GBFeatures'>, 'args': {'conv_layers_num': 12, 'conv_type': <class 'torch_geometric.nn.conv.graph_conv.GraphConv'>, 'h_ch': 64, 'out_ch': 64, 'pool_type': <class 'siamese_graph.GlobalAttentionSelect'>, 'pool_att_ch': 32, 'pool_att_layers': 4, 'pool_ref': 'last'}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7f2e0698eca0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7f2e0698ed30>)
('bound_f1_loss', <function bound_f1_loss at 0x7f2e0698ee50>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): GraphConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (9): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (10): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
        (11): GCLayer(
          (conv): GraphConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 2.44
Seconds: 146.67

 ===== Test last_model. Execute time was:
Minutes: 0.01
Seconds: 0.33

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.33

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.34

Saving raw metrics in: ../test/test_output_siamese/test_command_line/22-train_05101005/short_0-0/GBSN05101005_short_0-0_metrics

 ===== best_model:
Epoch: 25
                          val      test
-------------------  --------  --------
main loss            0.232633  0.34946
average              0.889667  0.800221
roc_auc              0.631579  0.210526
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.932802  0.906624
soft_f1_loss         0.093987  0.134869
double_soft_f1_loss  0.494283  0.55134
bound_f1_loss        0.118344  0.158829

 ===== best_model_sa:
Epoch: 29
                           val       test
-------------------  ---------  ---------
main loss            0.318885   0.717236
average              0.902815   0.828723
roc_auc              0.684211   0.315789
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.945907   0.943873
soft_f1_loss         0.0410968  0.0446382
double_soft_f1_loss  0.518532   0.522318
bound_f1_loss        0.0654252  0.0689534

 ===== last_model:
Epoch: 129
                           val       test
-------------------  ---------  ---------
main loss            0.480977   1.19474
average              0.87944    0.803219
roc_auc              0.578947   0.210526
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.934297   0.921612
soft_f1_loss         0.0546454  0.0667939
double_soft_f1_loss  0.527207   0.533397
bound_f1_loss        0.0789307  0.0910358

 ===== Early stop model:
Epoch: 25
Early stop model deactivated

===== Max average in val: 0.902815 epoch 29

===== Optimize threshold for best_model:
Test: Original
0.8002209528999668
Val: Best th posible
('0.05', '0.00')
0.8931534664194611
Test: Optimized
0.8068857439626381
Test: Best th posible
('0.05', '0.00')
0.8068857439626381

===== Optimize threshold for best_model_sa:
Test: Original
0.8287234259301357
Val: Best th posible
('0.05', '0.00')
0.9034222819820716
Test: Optimized
0.8296094266817752
Test: Best th posible
('0.05', '0.00')
0.8296094266817752

==========
Max gpu_usage: 31820

 ===== Total time for GBSN05101005_short_0-0. Execute time was:
Minutes: 2.74
Seconds: 164.24
