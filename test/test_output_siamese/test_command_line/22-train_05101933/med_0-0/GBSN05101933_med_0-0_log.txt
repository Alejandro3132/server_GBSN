ds_op:  {'exp_label': 'med'}
experiment repetition:  0  of  1
data_type_list:  ['med']

Sparse mode: False
device cuda:7
tensor type torch.FloatTensor
Epochs: 100
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': [{'class': <class 'siamese_graph.GBFeatures'>, 'args': {'conv_layers_num': 9, 'conv_type': <class 'torch_geometric.nn.conv.le_conv.LEConv'>, 'h_ch': 64, 'out_ch': 64, 'pool_type': <class 'siamese_graph.GlobalAttentionSelect'>, 'pool_att_ch': 32, 'pool_att_layers': 8, 'pool_ref': 'last'}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7f5983cf0ca0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7f5983cf0d30>)
('bound_f1_loss', <function bound_f1_loss at 0x7f5983cf0e50>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): LEConv(38, 64)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): LEConv(64, 64)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=32, bias=True)
        (7): ReLU()
        (8): Linear(in_features=32, out_features=32, bias=True)
        (9): ReLU()
        (10): Linear(in_features=32, out_features=32, bias=True)
        (11): ReLU()
        (12): Linear(in_features=32, out_features=32, bias=True)
        (13): ReLU()
        (14): Linear(in_features=32, out_features=1, bias=True)
        (15): ReLU()
      ), nn=None)
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 1.75
Seconds: 105.17

 ===== Test last_model. Execute time was:
Minutes: 0.00
Seconds: 0.30

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.38

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.33

Saving raw metrics in: ../test/test_output_siamese/test_command_line/22-train_05101933/med_0-0/GBSN05101933_med_0-0_metrics

 ===== best_model:
Epoch: 28
                          val      test
-------------------  --------  --------
main loss            0.393821  0.346153
average              0.780924  0.759968
roc_auc              0.105263  0
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.915403  0.915887
soft_f1_loss         0.119276  0.129323
double_soft_f1_loss  0.556022  0.551898
bound_f1_loss        0.143268  0.1533

 ===== best_model_sa:
Epoch: 62
                           val       test
-------------------  ---------  ---------
main loss            3.61824    0.74967
average              0.834791   0.819251
roc_auc              0.342105   0.263158
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.947894   0.94914
soft_f1_loss         0.0322241  0.0318699
double_soft_f1_loss  0.516112   0.515935
bound_f1_loss        0.0565699  0.0562165

 ===== last_model:
Epoch: 99
                           val       test
-------------------  ---------  ---------
main loss            3.44982    0.725949
average              0.834394   0.829611
roc_auc              0.342105   0.315789
f1_score             0.974359   0.974359
c_at_1               0.95       0.95
f_05                 0.959596   0.959596
brier                0.945908   0.948308
soft_f1_loss         0.0341068  0.03269
double_soft_f1_loss  0.517053   0.516344
bound_f1_loss        0.0584484  0.0570348

 ===== Early stop model:
Epoch: 28
Early stop model deactivated

===== Max average in val: 0.834791 epoch 62

===== Optimize threshold for best_model:
Test: Original
0.7599683376582805
Val: Best th posible
('0.05', '0.00')
0.7860042126732605
Test: Optimized
0.7651993012826982
Test: Best th posible
('0.05', '0.00')
0.7651993012826982

===== Optimize threshold for best_model_sa:
Test: Original
0.8192506332032592
Val: Best th posible
('0.05', '0.00')
0.8350953798492998
Test: Optimized
0.8193749407805175
Test: Best th posible
('0.05', '0.00')
0.8193749407805175

==========
Max gpu_usage: 31926

 ===== Total time for GBSN05101933_med_0-0. Execute time was:
Minutes: 2.06
Seconds: 123.82
