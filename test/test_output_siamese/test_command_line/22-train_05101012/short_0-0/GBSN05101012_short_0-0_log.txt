ds_op:  {'exp_label': 'short'}
experiment repetition:  0  of  1
data_type_list:  ['short']

Sparse mode: False
device cuda:7
tensor type torch.FloatTensor
Epochs: 150
Batch size: 256
Starting with exp_op:
('model_args', {'raw_components_list': [{'class': <class 'siamese_graph.GBFeatures'>, 'args': {'conv_layers_num': 12, 'conv_type': <class 'torch_geometric.nn.conv.tag_conv.TAGConv'>, 'h_ch': 64, 'out_ch': 64, 'pool_type': <class 'siamese_graph.GlobalAttentionSelect'>, 'pool_att_ch': 32, 'pool_att_layers': 4, 'pool_ref': 'last'}}], 'final_out_join': 'abs', 'final_out_layers_num': 4, 'final_out_ch': 64})


loss_fn: BCEWithLogitsLoss()
loss_fn_aux_dict:
('soft_f1_loss', <function soft_f1_loss at 0x7f3c6566dca0>)
('double_soft_f1_loss', <function double_soft_f1_loss at 0x7f3c6566dd30>)
('bound_f1_loss', <function bound_f1_loss at 0x7f3c6566de50>)



===== Model:

 SiameseNetwork(
  (components): ModuleList(
    (0): GBFeatures(
      (conv_layers): ModuleList(
        (0): GCLayer(
          (conv): TAGConv(38, 64, K=3)
          (norm): BatchNorm(64)
        )
        (1): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (2): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (3): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (4): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (5): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (6): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (7): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (8): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (9): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (10): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
        (11): GCLayer(
          (conv): TAGConv(64, 64, K=3)
          (norm): BatchNorm(64)
        )
      )
      (pool): GlobalAttentionSelect(gate_nn=Sequential(
        (0): Linear(in_features=64, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=32, bias=True)
        (3): ReLU()
        (4): Linear(in_features=32, out_features=32, bias=True)
        (5): ReLU()
        (6): Linear(in_features=32, out_features=1, bias=True)
        (7): ReLU()
      ), nn=None)
    )
  )
  (final_out): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
    (4): Linear(in_features=64, out_features=64, bias=True)
    (5): ReLU()
    (6): Linear(in_features=64, out_features=1, bias=True)
  )
)

===== Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.001
    weight_decay: 0
)

 ===== Train model. Execute time was:
Minutes: 2.63
Seconds: 157.57

 ===== Test last_model. Execute time was:
Minutes: 0.01
Seconds: 0.32

 ===== Test best_model. Execute time was:
Minutes: 0.01
Seconds: 0.32

 ===== Test best_model_sa. Execute time was:
Minutes: 0.01
Seconds: 0.34

Saving raw metrics in: ../test/test_output_siamese/test_command_line/22-train_05101012/short_0-0/GBSN05101012_short_0-0_metrics

 ===== best_model:
Epoch: 21
                          val      test
-------------------  --------  --------
main loss            0.495095  0.443606
average              0.769803  0.908527
roc_auc              0.105263  0.789474
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.859799  0.869205
soft_f1_loss         0.193929  0.219412
double_soft_f1_loss  0.590238  0.558892
bound_f1_loss        0.217342  0.242961

 ===== best_model_sa:
Epoch: 10
                          val      test
-------------------  --------  --------
main loss            0.678307  0.678224
average              0.907222  0.896704
roc_auc              0.894737  0.842105
f1_score             0.974359  0.974359
c_at_1               0.95      0.95
f_05                 0.959596  0.959596
brier                0.75742   0.757461
soft_f1_loss         0.337735  0.337698
double_soft_f1_loss  0.623449  0.623421
bound_f1_loss        0.359689  0.359653

 ===== last_model:
Epoch: 149
                           val      test
-------------------  ---------  --------
main loss            4.85082    0.714741
average              0.527963   0.78379
roc_auc              0.0789474  0.736842
f1_score             0.666667   0.8125
c_at_1               0.5        0.7
f_05                 0.793651   0.915493
brier                0.600549   0.754113
soft_f1_loss         0.313073   0.199202
double_soft_f1_loss  0.656537   0.49283
bound_f1_loss        0.334906   0.22353

 ===== Early stop model:
Epoch: 21
Early stop model deactivated

===== Max average in val: 0.907222 epoch 10

===== Optimize threshold for best_model:
Test: Original
0.9085266899040226
Val: Best th posible
('0.05', '0.00')
0.783066712913125
Test: Optimized
0.922198893835381
Test: Best th posible
('0.05', '0.00')
0.922198893835381

===== Optimize threshold for best_model_sa:
Test: Original
0.8967041757079042
Val: Best th posible
('0.05', '0.00')
0.93752268080796
Test: Optimized
0.9269990178185971
Test: Best th posible
('0.05', '0.00')
0.9269990178185971

==========
Max gpu_usage: 31830

 ===== Total time for GBSN05101012_short_0-0. Execute time was:
Minutes: 2.92
Seconds: 175.48
